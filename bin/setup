#!/usr/bin/env ruby
require 'fileutils'

# path to your application root.
APP_ROOT = File.expand_path('..', __dir__)

class BrewTools
  def initialize
    @installed = !`command -v brew`.empty?
  end

  def installed_packages
    @installed_packages||= `brew list -1`.lines.map(&:chomp)
  end

  def check(package)
    if installed_packages.include?(package)
      puts "👍 #{package} - Installed"
    else
      puts "👎 #{package} - Not installed"
      print "Install using brew? Y/N > "
      response = gets.chomp
      if response == 'Y'
        `brew install #{package}`
      else
        puts "bin/setup may not complete correctly"
      end
    end
  end

  def installed?
    @installed
  end
end

def system!(*args)
  system(*args) || abort("\n== Command #{args} failed ==")
end

def set_bundler_build_flags
  flags = `bundle config get build.tiny_tds --parseable`.chomp
  if flags.empty?
    puts "No build flags set for tiny_tds, this can cause it to fail to find brew freetds"
  elsif flags.include?('--with-freetds-dir=$(brew --prefix freetds)')
    return
  else
    puts "Unexpected build flags for tiny_tds:"
    puts flags
  end
  print "Install bundler flags (This will replace existing tiny_tds flags)? Y/N > "
  response = gets.chomp
  if response == 'Y'
    `bundle config set build.tiny_tds --with-freetds-dir="\$(brew --prefix freetds)"`
  else
    puts "Some gems may refuse to install"
  end
end


def check_ruby_install(version)
  return if RUBY_VERSION == version

  puts "Found ruby version #{RUBY_VERSION} not #{version}"
  puts "Please install Ruby #{version}"
  exit
end

FileUtils.chdir APP_ROOT do
  puts '== Checking dependencies =='
  check_ruby_install(File.read('.ruby-version').chomp)

  PACKAGES = %w[freetds]

  brew = BrewTools.new
  if brew.installed?
    PACKAGES.each { |package| brew.check(package) }
  else
    puts "Automated checks assume brew install"
    puts "No brew detected. Please ensure the following are installed:"
    PACKAGES.each {|package| puts "- #{package}"}
  end

  puts "== Setting bundler flags =="
  if brew.installed?
    set_bundler_build_flags
  end

  # This script is a way to setup or update your development environment automatically.
  # This script is idempotent, so that you can run it at anytime and get an expectable outcome.
  # Add necessary setup steps to this file.

  puts '== Installing dependencies =='
  system! 'gem install bundler --conservative'
  system('bundle check') || system!('bundle install')

  # Install JavaScript dependencies
  # system('bin/yarn')

  # puts "\n== Copying sample files =="
  # unless File.exist?('config/database.yml')
  #   FileUtils.cp 'config/database.yml.sample', 'config/database.yml'
  # end

  puts "\n== Preparing database =="
  system! 'bin/rails db:prepare'

  puts "\n== Removing old logs and tempfiles =="
  system! 'bin/rails log:clear tmp:clear'

  puts "\n== Restarting application server =="
  system! 'bin/rails restart'
end
